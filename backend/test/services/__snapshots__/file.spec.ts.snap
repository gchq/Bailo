// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`services > file > downloadFile > success 1`] = `
{
  "Body": {
    "pipe": [MockFunction spy],
  },
}
`;

exports[`services > file > finishUploadMultipartFile > success 1`] = `
{
  "_id": [MockFunction spy],
  "aggregate": [MockFunction spy],
  "avScan": {
    "aggregate": [MockFunction spy],
    "delete": [MockFunction spy],
    "deleteMany": [MockFunction spy],
    "find": [MockFunction spy] {
      "calls": [
        [
          {
            "fileId": "function(...args) {
    let state2 = getInternalState(fn);
    state2.called = !0, state2.callCount++, state2.calls.push(args);
    let next = state2.next.shift();
    if (next) {
      state2.results.push(next);
      let [type2, result2] = next;
      if (type2 === "ok")
        return result2;
      throw result2;
    }
    let result, type = "ok", resultIndex = state2.results.length;
    if (state2.impl)
      try {
        new.target ? result = Reflect.construct(state2.impl, args, new.target) : result = state2.impl.apply(this, args), type = "ok";
      } catch (err) {
        throw result = err, type = "error", state2.results.push([type, err]), err;
      }
    let resultTuple = [type, result];
    return isPromise(result) && result.then(
      (r) => state2.resolves[resultIndex] = ["ok", r],
      (e) => state2.resolves[resultIndex] = ["error", e]
    ), state2.results.push(resultTuple), result;
  }",
          },
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": [Circular],
        },
      ],
    },
    "findOne": [MockFunction spy],
  },
  "complete": true,
  "delete": [MockFunction spy],
  "find": [MockFunction spy],
  "findById": [MockFunction spy] {
    "calls": [
      [
        "testFile",
      ],
    ],
    "results": [
      {
        "type": "return",
        "value": {
          "_id": [MockFunction spy],
          "aggregate": [MockFunction spy],
          "complete": true,
          "delete": [MockFunction spy],
          "find": [MockFunction spy],
          "findById": [MockFunction spy] {
            "calls": [
              [
                "testFile",
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "findOneAndDelete": [MockFunction spy],
          "findOneAndUpdate": [MockFunction spy],
          "group": [MockFunction spy],
          "match": [MockFunction spy],
          "save": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "size": 100,
          "tags": [],
          "toObject": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
        },
      },
    ],
  },
  "findOneAndDelete": [MockFunction spy],
  "findOneAndUpdate": [MockFunction spy],
  "group": [MockFunction spy],
  "id": "function(...args) {
    let state2 = getInternalState(fn);
    state2.called = !0, state2.callCount++, state2.calls.push(args);
    let next = state2.next.shift();
    if (next) {
      state2.results.push(next);
      let [type2, result2] = next;
      if (type2 === "ok")
        return result2;
      throw result2;
    }
    let result, type = "ok", resultIndex = state2.results.length;
    if (state2.impl)
      try {
        new.target ? result = Reflect.construct(state2.impl, args, new.target) : result = state2.impl.apply(this, args), type = "ok";
      } catch (err) {
        throw result = err, type = "error", state2.results.push([type, err]), err;
      }
    let resultTuple = [type, result];
    return isPromise(result) && result.then(
      (r) => state2.resolves[resultIndex] = ["ok", r],
      (e) => state2.resolves[resultIndex] = ["error", e]
    ), state2.results.push(resultTuple), result;
  }",
  "match": [MockFunction spy],
  "save": [MockFunction spy] {
    "calls": [
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": {
          "_id": [MockFunction spy],
          "aggregate": [MockFunction spy],
          "complete": true,
          "delete": [MockFunction spy],
          "find": [MockFunction spy],
          "findById": [MockFunction spy] {
            "calls": [
              [
                "testFile",
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "findOneAndDelete": [MockFunction spy],
          "findOneAndUpdate": [MockFunction spy],
          "group": [MockFunction spy],
          "match": [MockFunction spy],
          "save": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "size": 100,
          "tags": [],
          "toObject": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
        },
      },
    ],
  },
  "size": 100,
  "tags": [],
  "toObject": [MockFunction spy] {
    "calls": [
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": {
          "_id": [MockFunction spy],
          "aggregate": [MockFunction spy],
          "complete": true,
          "delete": [MockFunction spy],
          "find": [MockFunction spy],
          "findById": [MockFunction spy] {
            "calls": [
              [
                "testFile",
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "findOneAndDelete": [MockFunction spy],
          "findOneAndUpdate": [MockFunction spy],
          "group": [MockFunction spy],
          "match": [MockFunction spy],
          "save": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "size": 100,
          "tags": [],
          "toObject": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
        },
      },
    ],
  },
}
`;

exports[`services > file > getFilesByIds > success 1`] = `
[
  {
    "_id": {
      "toString": [MockFunction spy],
    },
    "avScan": [],
    "example": "file",
  },
]
`;

exports[`services > file > getFilesByIds > success with scans mapped 1`] = `
[
  {
    "_id": "123",
    "avScan": [
      {
        "fileId": "123",
      },
      {
        "fileId": "123",
      },
    ],
    "example": "file",
  },
  {
    "_id": "321",
    "avScan": [
      {
        "fileId": "321",
      },
    ],
    "example": "file",
  },
]
`;

exports[`services > file > getFilesByModel > success 1`] = `
[
  {
    "_id": {
      "toString": [MockFunction spy],
    },
    "example": "file",
  },
]
`;

exports[`services > file > removeFile > success 1`] = `
{
  "_id": {
    "toString": [MockFunction spy] {
      "calls": [
        [],
      ],
      "results": [
        {
          "type": "return",
          "value": "73859F8D26679D2E52597326",
        },
      ],
    },
  },
  "id": "73859F8D26679D2E52597326",
  "modelId": "testModel",
}
`;

exports[`services > file > startUploadMultipartFile > success 1`] = `
{
  "chunks": [
    {
      "endByte": 5242879,
      "presignedUrl": "https://test.com/presigned/url",
      "startByte": 0,
    },
    {
      "endByte": 10485759,
      "presignedUrl": "https://test.com/presigned/url",
      "startByte": 5242880,
    },
  ],
  "file": {
    "_id": [MockFunction spy],
    "aggregate": [MockFunction spy],
    "delete": [MockFunction spy],
    "find": [MockFunction spy],
    "findById": [MockFunction spy],
    "findOneAndDelete": [MockFunction spy],
    "findOneAndUpdate": [MockFunction spy],
    "group": [MockFunction spy],
    "match": [MockFunction spy],
    "save": [MockFunction spy] {
      "calls": [
        [],
      ],
      "results": [
        {
          "type": "return",
          "value": [Circular],
        },
      ],
    },
    "size": 100,
    "tags": [],
    "toObject": [MockFunction spy],
  },
  "uploadId": "uploadId",
}
`;

exports[`services > file > updateFile > success 1`] = `
{
  "_id": {
    "toString": [MockFunction spy] {
      "calls": [
        [],
        [],
      ],
      "results": [
        {
          "type": "return",
          "value": "73859F8D26679D2E52597326",
        },
        {
          "type": "return",
          "value": "73859F8D26679D2E52597326",
        },
      ],
    },
  },
  "id": "73859F8D26679D2E52597326",
  "modelId": "testModel",
}
`;

exports[`services > file > updateFile > success multiple params 1`] = `
{
  "_id": {
    "toString": [MockFunction spy] {
      "calls": [
        [],
        [],
      ],
      "results": [
        {
          "type": "return",
          "value": "73859F8D26679D2E52597326",
        },
        {
          "type": "return",
          "value": "73859F8D26679D2E52597326",
        },
      ],
    },
  },
  "id": "73859F8D26679D2E52597326",
  "modelId": "testModel",
}
`;

exports[`services > file > uploadFile > success 1`] = `
{
  "_id": [MockFunction spy],
  "aggregate": [MockFunction spy],
  "avScan": {
    "aggregate": [MockFunction spy],
    "delete": [MockFunction spy],
    "deleteMany": [MockFunction spy],
    "find": [MockFunction spy] {
      "calls": [
        [
          {
            "fileId": "function(...s) {
    let n = T(t);
    n.called = !0, n.callCount++, n.calls.push(s);
    let d = n.next.shift();
    if (d) {
      n.results.push(d);
      let [a, i] = d;
      if (a === "ok")
        return i;
      throw i;
    }
    let o, c = "ok", p = n.results.length;
    if (n.impl)
      try {
        new.target ? o = Reflect.construct(n.impl, s, new.target) : o = n.impl.apply(this, s), c = "ok";
      } catch (a) {
        throw o = a, c = "error", n.results.push([c, a]), a;
      }
    let g = [c, o];
    return w(o) && o.then(
      (a) => n.resolves[p] = ["ok", a],
      (a) => n.resolves[p] = ["error", a]
    ), n.results.push(g), o;
  }",
          },
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": [Circular],
        },
      ],
    },
    "findOne": [MockFunction spy],
  },
  "delete": [MockFunction spy],
  "find": [MockFunction spy],
  "findById": [MockFunction spy],
  "findOneAndDelete": [MockFunction spy],
  "findOneAndUpdate": [MockFunction spy],
  "group": [MockFunction spy],
  "id": "function(...s) {
    let n = T(t);
    n.called = !0, n.callCount++, n.calls.push(s);
    let d = n.next.shift();
    if (d) {
      n.results.push(d);
      let [a, i] = d;
      if (a === "ok")
        return i;
      throw i;
    }
    let o, c = "ok", p = n.results.length;
    if (n.impl)
      try {
        new.target ? o = Reflect.construct(n.impl, s, new.target) : o = n.impl.apply(this, s), c = "ok";
      } catch (a) {
        throw o = a, c = "error", n.results.push([c, a]), a;
      }
    let g = [c, o];
    return w(o) && o.then(
      (a) => n.resolves[p] = ["ok", a],
      (a) => n.resolves[p] = ["error", a]
    ), n.results.push(g), o;
  }",
  "match": [MockFunction spy],
  "save": [MockFunction spy] {
    "calls": [
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": {
          "_id": [MockFunction spy],
          "aggregate": [MockFunction spy],
          "delete": [MockFunction spy],
          "find": [MockFunction spy],
          "findById": [MockFunction spy],
          "findOneAndDelete": [MockFunction spy],
          "findOneAndUpdate": [MockFunction spy],
          "group": [MockFunction spy],
          "match": [MockFunction spy],
          "save": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "size": 100,
          "tags": [],
          "toObject": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
        },
      },
    ],
  },
  "size": 100,
  "tags": [],
  "toObject": [MockFunction spy] {
    "calls": [
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": {
          "_id": [MockFunction spy],
          "aggregate": [MockFunction spy],
          "delete": [MockFunction spy],
          "find": [MockFunction spy],
          "findById": [MockFunction spy],
          "findOneAndDelete": [MockFunction spy],
          "findOneAndUpdate": [MockFunction spy],
          "group": [MockFunction spy],
          "match": [MockFunction spy],
          "save": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "size": 100,
          "tags": [],
          "toObject": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
        },
      },
    ],
  },
}
`;

exports[`services > file > uploadFile > virus scan initialised 1`] = `
{
  "_id": [MockFunction spy],
  "aggregate": [MockFunction spy],
  "avScan": {
    "aggregate": [MockFunction spy],
    "delete": [MockFunction spy],
    "deleteMany": [MockFunction spy],
    "find": [MockFunction spy] {
      "calls": [
        [
          {
            "fileId": "function(...s) {
    let n = T(t);
    n.called = !0, n.callCount++, n.calls.push(s);
    let d = n.next.shift();
    if (d) {
      n.results.push(d);
      let [a, i] = d;
      if (a === "ok")
        return i;
      throw i;
    }
    let o, c = "ok", p = n.results.length;
    if (n.impl)
      try {
        new.target ? o = Reflect.construct(n.impl, s, new.target) : o = n.impl.apply(this, s), c = "ok";
      } catch (a) {
        throw o = a, c = "error", n.results.push([c, a]), a;
      }
    let g = [c, o];
    return w(o) && o.then(
      (a) => n.resolves[p] = ["ok", a],
      (a) => n.resolves[p] = ["error", a]
    ), n.results.push(g), o;
  }",
          },
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": [Circular],
        },
      ],
    },
    "findOne": [MockFunction spy],
  },
  "delete": [MockFunction spy],
  "find": [MockFunction spy],
  "findById": [MockFunction spy],
  "findOneAndDelete": [MockFunction spy],
  "findOneAndUpdate": [MockFunction spy],
  "group": [MockFunction spy],
  "id": "function(...s) {
    let n = T(t);
    n.called = !0, n.callCount++, n.calls.push(s);
    let d = n.next.shift();
    if (d) {
      n.results.push(d);
      let [a, i] = d;
      if (a === "ok")
        return i;
      throw i;
    }
    let o, c = "ok", p = n.results.length;
    if (n.impl)
      try {
        new.target ? o = Reflect.construct(n.impl, s, new.target) : o = n.impl.apply(this, s), c = "ok";
      } catch (a) {
        throw o = a, c = "error", n.results.push([c, a]), a;
      }
    let g = [c, o];
    return w(o) && o.then(
      (a) => n.resolves[p] = ["ok", a],
      (a) => n.resolves[p] = ["error", a]
    ), n.results.push(g), o;
  }",
  "match": [MockFunction spy],
  "save": [MockFunction spy] {
    "calls": [
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": {
          "_id": [MockFunction spy],
          "aggregate": [MockFunction spy],
          "delete": [MockFunction spy],
          "find": [MockFunction spy],
          "findById": [MockFunction spy],
          "findOneAndDelete": [MockFunction spy],
          "findOneAndUpdate": [MockFunction spy],
          "group": [MockFunction spy],
          "match": [MockFunction spy],
          "save": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "size": 100,
          "tags": [],
          "toObject": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
        },
      },
    ],
  },
  "size": 100,
  "tags": [],
  "toObject": [MockFunction spy] {
    "calls": [
      [],
    ],
    "results": [
      {
        "type": "return",
        "value": {
          "_id": [MockFunction spy],
          "aggregate": [MockFunction spy],
          "delete": [MockFunction spy],
          "find": [MockFunction spy],
          "findById": [MockFunction spy],
          "findOneAndDelete": [MockFunction spy],
          "findOneAndUpdate": [MockFunction spy],
          "group": [MockFunction spy],
          "match": [MockFunction spy],
          "save": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
          "size": 100,
          "tags": [],
          "toObject": [MockFunction spy] {
            "calls": [
              [],
            ],
            "results": [
              {
                "type": "return",
                "value": [Circular],
              },
            ],
          },
        },
      },
    ],
  },
}
`;

exports[`services > file > uploadFile > virus scan initialised 2`] = `[]`;
