// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`clients > registry > doesLayerExist > success false 1`] = `
[
  [
    "https://localhost:5000/v2/modelId/image/blobs/digest",
    {
      "dispatcher": "mock agent",
      "headers": {
        "Authorization": "Bearer token",
      },
      "method": "HEAD",
      "signal": AbortSignal {
        Symbol(kEvents): Map {},
        Symbol(events.maxEventTargetListeners): 0,
        Symbol(events.maxEventTargetListenersWarned): false,
        Symbol(kHandlers): Map {},
        Symbol(kAborted): false,
        Symbol(kReason): undefined,
        Symbol(kComposite): false,
      },
    },
  ],
]
`;

exports[`clients > registry > doesLayerExist > success true 1`] = `
[
  [
    "https://localhost:5000/v2/modelId/image/blobs/digest",
    {
      "dispatcher": "mock agent",
      "headers": {
        "Authorization": "Bearer token",
      },
      "method": "HEAD",
      "signal": AbortSignal {
        Symbol(kEvents): Map {},
        Symbol(events.maxEventTargetListeners): 0,
        Symbol(events.maxEventTargetListenersWarned): false,
        Symbol(kHandlers): Map {},
        Symbol(kAborted): false,
        Symbol(kReason): undefined,
        Symbol(kComposite): false,
      },
    },
  ],
]
`;

exports[`clients > registry > getImageTagManifest > success 1`] = `
[
  [
    "https://localhost:5000/v2/modelId/image/manifests/tag1",
    {
      "dispatcher": "mock agent",
      "headers": {
        "Accept": "application/vnd.docker.distribution.manifest.v2+json",
        "Authorization": "Bearer token",
      },
      "signal": AbortSignal {
        Symbol(kEvents): Map {},
        Symbol(events.maxEventTargetListeners): 0,
        Symbol(events.maxEventTargetListenersWarned): false,
        Symbol(kHandlers): Map {},
        Symbol(kAborted): false,
        Symbol(kReason): undefined,
        Symbol(kComposite): false,
      },
    },
  ],
]
`;

exports[`clients > registry > getRegistryLayerStream > success 1`] = `
[
  [
    "https://localhost:5000/v2/modelId/image/blobs/sha256:digest1",
    {
      "dispatcher": "mock agent",
      "headers": {
        "Accept": "application/vnd.docker.distribution.manifest.v2+json",
        "Authorization": "Bearer token",
      },
      "signal": AbortSignal {
        Symbol(kEvents): Map {},
        Symbol(events.maxEventTargetListeners): 0,
        Symbol(events.maxEventTargetListenersWarned): false,
        Symbol(kHandlers): Map {},
        Symbol(kAborted): false,
        Symbol(kReason): undefined,
        Symbol(kComposite): false,
      },
    },
  ],
]
`;

exports[`clients > registry > initialiseUpload > success 1`] = `
[
  [
    "https://localhost:5000/v2/modelId/image/blobs/uploads/",
    {
      "dispatcher": "mock agent",
      "headers": {
        "Authorization": "Bearer token",
      },
      "method": "POST",
      "signal": AbortSignal {
        Symbol(kEvents): Map {},
        Symbol(events.maxEventTargetListeners): 0,
        Symbol(events.maxEventTargetListenersWarned): false,
        Symbol(kHandlers): Map {},
        Symbol(kAborted): false,
        Symbol(kReason): undefined,
        Symbol(kComposite): false,
      },
    },
  ],
]
`;

exports[`clients > registry > listImageTags > success 1`] = `
[
  [
    "https://localhost:5000/v2/modelId/image/tags/list",
    {
      "dispatcher": "mock agent",
      "headers": {
        "Authorization": "Bearer token",
      },
      "signal": AbortSignal {
        Symbol(kEvents): Map {},
        Symbol(events.maxEventTargetListeners): 0,
        Symbol(events.maxEventTargetListenersWarned): false,
        Symbol(kHandlers): Map {},
        Symbol(kAborted): false,
        Symbol(kReason): undefined,
        Symbol(kComposite): false,
      },
    },
  ],
]
`;

exports[`clients > registry > listModelRepos > only returns model repos 1`] = `
[
  [
    "https://localhost:5000/v2/_catalog?n=100&last=modelId",
    {
      "dispatcher": "mock agent",
      "headers": {
        "Authorization": "Bearer token",
      },
      "signal": AbortSignal {
        Symbol(kEvents): Map {},
        Symbol(events.maxEventTargetListeners): 0,
        Symbol(events.maxEventTargetListenersWarned): false,
        Symbol(kHandlers): Map {},
        Symbol(kAborted): false,
        Symbol(kReason): undefined,
        Symbol(kComposite): false,
      },
    },
  ],
]
`;

exports[`clients > registry > putManifest > success 1`] = `
[
  [
    "https://localhost:5000/v2/modelId/image/manifests/tag",
    {
      "body": null,
      "dispatcher": "mock agent",
      "headers": {
        "Authorization": "Bearer token",
        "Content-Type": "",
        "name": "modelId/image",
        "reference": "tag",
      },
      "method": "PUT",
      "signal": AbortSignal {
        Symbol(kEvents): Map {},
        Symbol(events.maxEventTargetListeners): 0,
        Symbol(events.maxEventTargetListenersWarned): false,
        Symbol(kHandlers): Map {},
        Symbol(kAborted): false,
        Symbol(kReason): undefined,
        Symbol(kComposite): false,
      },
    },
  ],
]
`;

exports[`clients > registry > uploadLayerMonolithic > success 1`] = `
[
  [
    "https://localhost:5000/v2/url&digest=digest",
    {
      "body": [MockFunction spy],
      "dispatcher": "mock agent",
      "duplex": "half",
      "headers": {
        "Authorization": "Bearer token",
        "content-length": "size",
        "content-type": "application/octet-stream",
      },
      "method": "PUT",
      "redirect": "error",
      "signal": AbortSignal {
        Symbol(kEvents): Map {},
        Symbol(events.maxEventTargetListeners): 0,
        Symbol(events.maxEventTargetListenersWarned): false,
        Symbol(kHandlers): Map {},
        Symbol(kAborted): false,
        Symbol(kReason): undefined,
        Symbol(kComposite): false,
      },
      "window": null,
    },
  ],
]
`;
