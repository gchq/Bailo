# syntax=docker/dockerfile:1

FROM python:3.13-bookworm AS sphinx-docs
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1
RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt \
    rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
    apt-get update && \
    apt-get install -y --no-install-recommends pandoc
WORKDIR /app/docs
COPY backend/docs .
RUN --mount=type=cache,target=/root/.cache/pip pip install --upgrade bailo -r requirements.txt
RUN make dirhtml

FROM node:25-alpine AS backend
RUN apk add --no-cache libc6-compat && \
    apk update
WORKDIR /app
COPY backend/package*.json ./
RUN --mount=type=cache,target=/cache/npm npm ci --cache=/cache/npm
COPY backend .
RUN npm run build

FROM node:25-alpine AS frontend
ENV NEXT_TELEMETRY_DISABLED=1
RUN apk add --no-cache libc6-compat && \
    apk update
WORKDIR /app
COPY frontend/package*.json ./
RUN --mount=type=cache,target=/cache/npm npm ci --cache=/cache/npm
COPY frontend .
RUN --mount=type=cache,target=/cache/npm npm install sharp@0.33.5 --cache=/cache/npm
RUN npm run build

FROM ubuntu:jammy
ENV DEBIAN_FRONTEND=noninteractive
# Cache packages with run cache, update system packages, install packages
RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt \
    rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
    apt-get update && \
    apt-get install -y --no-install-recommends git curl wget gnupg ca-certificates iproute2 nginx supervisor

RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt \
    curl -fsSL https://deb.nodesource.com/setup_24.x | bash - && \
    apt-get update && \
    apt-get install -y --no-install-recommends nodejs

#ENV MINIO_ROOT_USER=minioadmin
#ENV MINIO_ROOT_PASSWORD=minioadmin
VOLUME minio-data
RUN wget -q https://dl.min.io/server/minio/release/linux-amd64/minio && \
    wget -q https://dl.min.io/client/mc/release/linux-amd64/mc && \
    install -m755 minio /usr/local/bin/ && \
    install -m755 mc /usr/local/bin/

RUN --mount=type=cache,target=/var/cache/apt --mount=type=cache,target=/var/lib/apt \
    wget -qO - https://pgp.mongodb.com/server-7.0.asc | gpg --dearmor -o /etc/apt/trusted.gpg.d/mongodb-7.0.gpg && \
    echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" |  tee /etc/apt/sources.list.d/mongodb-org-7.0.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends mongodb-org && \
    mkdir -m 777 -p /data/db

COPY infrastructure/standalone/nginx.conf /etc/nginx/nginx.conf

RUN wget -q https://github.com/distribution/distribution/releases/download/v3.0.0/registry_3.0.0_linux_amd64.tar.gz && \
    tar -xvf registry_3.0.0_linux_amd64.tar.gz registry && \
    install -m755 registry /usr/local/bin/

ENV REGISTRY_HTTP_TLS_CERTIFICATE=/app/backend/certs/cert.pem \
    REGISTRY_HTTP_TLS_KEY=/app/backend/certs/key.pem \
    REGISTRY_STORAGE_S3_ACCESSKEY=minioadmin \
    REGISTRY_STORAGE_S3_SECRETKEY=minioadmin \
    REGISTRY_AUTH=token \
    REGISTRY_AUTH_TOKEN_REALM=http://localhost:3001/api/v1/registry_auth \
    REGISTRY_AUTH_TOKEN_SERVICE=RegistryAuth \
    REGISTRY_AUTH_TOKEN_ISSUER=RegistryIssuer \
    REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/app/backend/certs/cert.pem

COPY infrastructure/standalone/registry.conf /registry.conf

RUN wget -q https://github.com/tweedegolf/mailcrab/releases/download/v1.5.0/mailcrab-linux-x86-64-gnu-v1.5.0 && \
    install -m755 mailcrab-linux-x86-64-gnu-v1.5.0 /usr/local/bin/mailcrab

# Backend
WORKDIR /app/backend
COPY backend/package*.json ./
COPY backend/certs/san.cnf ./
RUN --mount=type=cache,target=/cache/npm npm ci --omit=dev --cache=/cache/npm

RUN mkdir -p certs && openssl genrsa -out certs/key.pem 2048 && \
    openssl req -new -x509 -key certs/key.pem -out certs/cert.pem -config ./san.cnf -extensions 'v3_req' -days 360

COPY --from=sphinx-docs /app/docs/python-docs python-docs
COPY --from=backend /app/config config
COPY --from=backend /app/dist .
COPY infrastructure/standalone/local.cjs config/local.cjs
ENV NODE_ENV=production

# Frontend
WORKDIR /app/frontend
COPY --from=frontend /app/next.config.mjs .
COPY --from=frontend /app/package.json .
COPY --from=frontend /app/.next/standalone ./
COPY --from=frontend /app/.next/static ./.next/static
COPY --from=frontend /app/public ./public
ENV NEXT_TELEMETRY_DISABLED=1 \
    HOSTNAME=0.0.0.0

COPY infrastructure/standalone/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

WORKDIR /

EXPOSE 8080 9000 27017

ENTRYPOINT ["/usr/bin/supervisord"]
