---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "bailo.fullname" . }}-config
  labels:
    {{- include "bailo.labels" . | nindent 4 }}
data:
  production.cjs: |
    module.exports = {
      api: {
        // Publicly accessible host
        host: '',

        // Port to listen on
        port: {{ .Values.service.backendPort }},
      },

      app: {
        // Publicly accessible route to service
        protocol: '{{ .Values.config.app.protocol }}',
        host: '{{ .Values.route.appPublicRoute }}',
        port: {{ .Values.config.app.port }},

        // Typically generated from `npm run certs`
        privateKey: '/app/certs/key.pem',
        publicKey: '/app/certs/cert.pem',
      },

      mongo: {
        // A mongo connection URI, can contain usernames, passwords, replica set information, etc.
        // See: https://www.mongodb.com/docs/manual/reference/connection-string/
        uri: '{{ include "bailo.mongoConnectionURI" . }}',
        user: '{{ index .Values.mongodb.auth.usernames 0 }}',

        connectionOptions: {
          useFindAndModify: false,
          useNewUrlParser: true,
          useUnifiedTopology: true,
          useCreateIndex: true,
          ssl: {{ .Values.mongodb.ssl }},
          sslValidate: {{ .Values.mongodb.sslValidate }},
        },
      },

      registry: {
        connection:{
          // This is explicitly NOT using connection.protocol, as this should always be
          // the internal registry address which is guarenteed to be https.
          internal: 'https://{{ include "bailo.registry.host" . }}:{{ .Values.registry.port }}',
          host: '{{ include "bailo.registry.host" . }}:{{ .Values.registry.port }}',
          port: '{{ .Values.registry.port }}',
          protocol: '{{ .Values.registry.protocol }}',
          insecure: {{ .Values.registry.insecure }},
        },

        // Service and Issuer must match those set in the registry configuration
        service: 'RegistryAuth',
        issuer: 'RegistryIssuer',

        // Allow self-signed certificates
        insecure: {{ .Values.registry.insecure }},
      },

      avScanning: {
        clamdscan: {
          host: '{{ include "bailo.fullname" . }}-clamav',
          port: {{ .Values.clamav.port }},
        },
      },

      smtp: {
        // Enable / disable all email sending
        enabled: true,

        // Connection information for an SMTP server.  Settings are passed directly to 'node-mailer', see reference for options:
        // https://nodemailer.com/smtp/#1-single-connection
        connection: {
          host: '{{ include "bailo.mail.host" . }}',
          port: {{ .Values.config.smtp.port }},
          secure: {{ .Values.config.smtp.secure }},
          auth: {
            user: '{{ .Values.config.smtp.user }}',
            pass: '{{ .Values.config.smtp.pass }}',
          },
          tls: {
            rejectUnauthorized: {{ .Values.config.smtp.rejectUnauthorized }},
          },
        },

        // Set the email address that Bailo should use, can be different from the SMTP server details.
        from: '{{ .Values.config.smtp.from }}',
      },

      log: {
        level: 'info',
      },

      session: {
        secret: '{{ .Values.cookie.secret }}',
      },

      oauth: {
        provider: 'cognito',

        grant: {
          // Grant configuration options, provide any option from:
          // https://www.npmjs.com/package/grant
          defaults: {
            origin: '{{ .Values.oauth.origin }}',
          },

          cognito: {
            key: '{{ .Values.oauth.cognito.key }}',
            secret: '{{ .Values.oauth.cognito.secret }}',
            dynamic: {{ .Values.oauth.cognito.dynamic }},
            response: {{ .Values.oauth.cognito.response }},
            callback: '{{ .Values.oauth.cognito.callback }}',
            subdomain: '{{ .Values.oauth.cognito.subdomain }}',
          },
        },
        cognito: {
          identityProviderClient: {
            region: 'eu-west-2',
            credentials: {
              accessKeyId: '{{ .Values.oauth.identityProviderClient.accessKeyId }}',
              secretAccessKey: '{{ .Values.oauth.identityProviderClient.secretAccessKey }}',
            },
          },
          userPoolId: '{{ .Values.oauth.identityProviderClient.userPoolId }}',
          userIdAttribute: '{{ .Values.oauth.identityProviderClient.userIdAttribute }}',
        },
      },

      // These settings are PUBLIC and shared with the UI
      ui: {
        // Show a banner at the top of the screen on all pages
        banner: {
          enabled: {{ .Values.config.ui.banner.enabled }},
          text: '{{ .Values.config.ui.banner.text }}',
          colour: '{{ .Values.config.ui.banner.colour }}',
          textColor: '{{ .Values.config.ui.banner.textColor}}'
        },

        // Show announcement banner at the bottom of the screen
        announcement: {
          enabled: {{ .Values.config.ui.announcement.enabled }},
          text: '{{ .Values.config.ui.announcement.text }}',
          startTimestamp: '{{ .Values.config.ui.announcement.startTimestamp }}'
        },

        // Contact details for the support team
        issues: {
          label: 'Bailo Support Team',
          supportHref: 'mailto:{{ .Values.config.supportEmail }}?subject=Bailo%20Support',
          contactHref: 'mailto:{{ .Values.config.supportEmail }}?subject=Bailo%20Contact',
        },

        // The publicly accessible location of the registry, including host and port
        registry: {
          host: '{{ .Values.route.appPublicRoute }}',
        },

        inference: {
          enabled: {{ .Values.inference.enabled}},
          connection: {
            host: '{{ .Values.inference.host}}',
          },
          gpus: '{{ .Values.inference.gpus }}',
          authorizationTokenName: '{{ .Values.inference.authorizationTokenName }}'
        },

        modelMirror: {
          import: {
            enabled: {{ .Values.modelMirror.import.enabled }},
          },
          export: {
            enabled: {{ .Values.modelMirror.export.enabled }},
            disclaimer: '{{ .Values.modelMirror.export.disclaimer }}'
          }
        },
      },

      connectors: {
        authentication: {
          kind: '{{ .Values.connectors.authentication.kind }}',
        },

        authorisation: {
          kind: '{{ .Values.connectors.authorisation.kind }}',
        },

        audit: {
          kind: '{{ .Values.connectors.audit.kind }}',
        },

        fileScanners: {
          kinds: {{ toJson .Values.connectors.fileScanners.kinds }}
        },
      },

      log: {
        level: 'trace',
      },

      instrumentation: {
        enabled: {{ .Values.instrumentation.enabled }},
        endpoint: '{{ .Values.instrumentation.endpoint }}',
        debug: {{ .Values.instrumentation.debug }}
      },

      s3: {
        endpoint: '{{ ternary "https" "http" (eq .Values.minio.useSSL true)}}://{{ include "bailo.minio.host" . }}:{{ .Values.minio.service.ports.api }}',
        region: '{{ .Values.minio.region }}',
        forcePathStyle: true,

        // Names of buckets that Bailo uses
        buckets: {
          uploads: '{{ .Values.minio.uploadBucket }}',
          registry: '{{ .Values.minio.registryBucket }}',
        },
      },

      modelMirror: {
        export: {
          bucket: '{{ .Values.modelMirror.export.bucket }}',
          kmsSignature: {
            enabled: {{ .Values.modelMirror.export.kmsSignature.enabled }},
            keyId: '{{ .Values.modelMirror.export.kmsSignature.keyId }}',
            KMSClient: {
              region: '{{ .Values.modelMirror.export.kmsSignature.KMSClient.region }}',
            },
          },
        },
      },
    }

  custom-environment-variables.cjs: |
    module.exports = {
      mongo: {
        pass: 'MONGO_PASSWORD',
      },
      s3: {
        credentials: {
          accessKeyId: 'MINIO_ACCESS_KEY',
          secretAccessKey: 'MINIO_SECRET_KEY',
        },
      },
      instrumentation: {
        authenticationToken: 'OTEL_EXPORTER_TOKEN',
      },
      inference: {
        authorisationToken: 'INFERENCING_WRITE_TOKEN',
      },
      modelMirror: {
        export: {
          kmsSignature: {
            KMSClient: {
              credentials: {
                accessKeyId: 'KMS_ACCESS_KEY',
                secretAccessKey: 'KMS_ACCESS_KEY',
              },
            },
          },
        },
      },
    }
